apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-credentials
  namespace: elastic-synthetic-monitoring
  labels:
    app.kubernetes.io/name: elasticsearch-credentials
    app.kubernetes.io/component: credentials
  annotations:
    argocd.argoproj.io/sync-wave: "1"
type: Opaque
stringData:
  # These should be replaced with actual values or managed by external secret management
  elasticsearch-password: "changeme"
  kibana-api-key: ""
  elasticsearch-username: "elastic"
  elasticsearch-url: "https://elasticsearch.example.com:9200"
  kibana-url: "https://kibana.example.com"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elastic-agent-config
  namespace: elastic-synthetic-monitoring
  labels:
    app.kubernetes.io/name: elastic-agent-config
    app.kubernetes.io/component: configuration
  annotations:
    argocd.argoproj.io/sync-wave: "2"
data:
  elastic-agent.yml: |
    outputs:
      default:
        type: elasticsearch
        hosts:
          - "${ELASTICSEARCH_URL}"
        username: "${ELASTICSEARCH_USERNAME}"
        password: "${ELASTICSEARCH_PASSWORD}"
        ssl:
          verification_mode: none
    
    inputs:
      - type: synthetics/http
        id: http-monitors
        use_output: default
        streams:
          - data_stream:
              dataset: http
              type: synthetics
            schedule: "@every 60s"
            timeout: 16s
            
      - type: synthetics/tcp
        id: tcp-monitors  
        use_output: default
        streams:
          - data_stream:
              dataset: tcp
              type: synthetics
            schedule: "@every 60s"
            timeout: 16s
            
      - type: synthetics/icmp
        id: icmp-monitors
        use_output: default
        streams:
          - data_stream:
              dataset: icmp
              type: synthetics
            schedule: "@every 60s"
            timeout: 16s
    
    logging:
      level: info
      to_files: true
      files:
        path: /var/log/elastic-agent
        name: elastic-agent
        keepfiles: 7
        permissions: 0644
    
    monitoring:
      enabled: true
      logs: true
      metrics: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-sync-script
  namespace: elastic-synthetic-monitoring
  labels:
    app.kubernetes.io/name: kibana-sync-script
    app.kubernetes.io/component: sync-service
  annotations:
    argocd.argoproj.io/sync-wave: "2"
data:
  sync-monitors.py: |
    #!/usr/bin/env python3
    """
    Kibana Synthetic Monitor Sync Script
    This script is embedded in the ConfigMap for the sync service
    """
    import os
    import sys
    import json
    import yaml
    import time
    import logging
    import requests
    from typing import Dict, List, Optional, Any
    from kubernetes import client, config
    
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    def main():
        logger.info("Kibana sync service starting...")
        
        # Initialize Kubernetes client
        try:
            config.load_incluster_config()
            logger.info("Loaded in-cluster Kubernetes config")
        except:
            try:
                config.load_kube_config()
                logger.info("Loaded local Kubernetes config")
            except Exception as e:
                logger.error(f"Failed to load Kubernetes config: {e}")
                sys.exit(1)
        
        # Get environment variables
        kibana_url = os.getenv('KIBANA_URL', 'https://kibana.example.com')
        api_key = os.getenv('KIBANA_API_KEY', '')
        namespace = os.getenv('NAMESPACE', 'elastic-synthetic-monitoring')
        sync_interval = int(os.getenv('SYNC_INTERVAL', '60'))
        
        logger.info(f"Kibana URL: {kibana_url}")
        logger.info(f"Namespace: {namespace}")
        logger.info(f"Sync interval: {sync_interval}s")
        
        if not api_key:
            logger.warning("No Kibana API key provided - sync functionality will be limited")
        
        # Main sync loop
        while True:
            try:
                logger.info("Starting sync cycle...")
                # Sync logic would go here
                logger.info("Sync cycle completed")
            except Exception as e:
                logger.error(f"Sync failed: {e}")
            
            time.sleep(sync_interval)
    
    if __name__ == '__main__':
        main()
  
  requirements.txt: |
    requests>=2.31.0
    pyyaml>=6.0
    kubernetes>=27.2.0
